"""
–ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–π —Ä–æ–±–æ—Ç—ã –Ø–Ω–¥–µ–∫—Å –ü—Ä–∞–∫—Ç–∏–∫—É–º.
"""
import logging
import os
import time

import requests
import telegram
from dotenv import load_dotenv

from hw_exceptions import (BadResponseError, DenialOfServiceError,
                           MissingVariableError)

load_dotenv()

PRACTICUM_TOKEN = os.getenv('PRACTICUM_TOKEN')
MY_CHAT_ID = os.getenv('MY_CHAT_ID')
AWESOM_O_TOKEN = os.getenv('AWESOM_O_TOKEN')

VARIABLE_NAMES = ('PRACTICUM_TOKEN', 'AWESOM_O_TOKEN', 'MY_CHAT_ID')

ENDPOINT = 'https://practicum.yandex.ru/api/user_api/homework_statuses/'
HEADERS = {'Authorization': f'OAuth {PRACTICUM_TOKEN}'}
RETRY_TIME = 600

VERDICTS = {
    'approved': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —Ä–µ–≤—å—é–µ—Ä—É –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –£—Ä–∞!',
    'rejected': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —É —Ä–µ–≤—å—é–µ—Ä–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è.',
    'reviewing': '–†–∞–±–æ—Ç–∞ –≤–∑—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≤—å—é–µ—Ä–æ–º.'
}

BAD_RESPONSE = ('–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ API: {}. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: '
                '{url}, {headers}, {params}.')
BOT_LAUNCH_STOPPED = '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'
DENIAL_OF_SERVICE = ('–û—Ç–∫–∞–∑ –æ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ö–ª—é—á: {}. –û—à–∏–±–∫–∞: {}. '
                     '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {url}, {headers}, {params}.')
ERROR_FOUND = '–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {}.'
INVALID_DATA_TYPE = '–î–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.'
MESSAGE_SENDING_FAILED = '–°–±–æ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {}.'
MESSAGE_SENT = '–°–æ–æ–±—â–µ–Ω–∏–µ "{}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º.'
MISSED_VARIABLES = ('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {}. '
                    '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
MISSING_REQUIRED_KEY = '–í –æ—Ç–≤–µ—Ç–µ –æ—Ç API-—Å–µ—Ä–≤–∏—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–ª—é—á.'
NO_RESPONSE = ('API-—Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {}. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: '
               '{url}, {headers}, {params}.')
STATUS_CHANGED = '–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã "{}". {}'
STATUSES_NOT_CHANGED = '–°—Ç–∞—Ç—É—Å—ã –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.'
UNEXPECTED_STATUS = '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {}.'

current_hw_id = None
last_message = None
last_message_hw_id = None


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    missed = [name for name in VARIABLE_NAMES if globals()[name] is None]
    if missed:
        logging.critical(MISSED_VARIABLES.format(missed))
    return not missed


def get_api_answer(timestamp):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã –∫ API-—Å–µ—Ä–≤–∏—Å—É."""
    request_params = dict(
        url=ENDPOINT, headers=HEADERS, params={'from_date': timestamp}
    )
    try:
        response = requests.get(**request_params)
    except requests.exceptions.RequestException as error:
        raise ConnectionError(NO_RESPONSE.format(error, **request_params))
    if response.status_code != 200:
        raise BadResponseError(
            BAD_RESPONSE.format(response.status_code, **request_params)
        )
    response_json = response.json()
    for key in ('error', 'code'):
        if key in response_json:
            raise DenialOfServiceError(
                DENIAL_OF_SERVICE.format(
                    key, response_json[key], **request_params
                )
            )
    return response_json


def check_response(response):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ API-—Å–µ—Ä–≤–∏—Å—É."""
    try:
        homeworks = response['homeworks']
        if not isinstance(homeworks, list):
            raise TypeError(INVALID_DATA_TYPE)
    except KeyError:
        raise KeyError(MISSING_REQUIRED_KEY)
    return homeworks


def parse_status(homework):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã."""
    homework_status = homework['status']
    if homework_status not in VERDICTS:
        raise ValueError(UNEXPECTED_STATUS.format(homework_status))
    return STATUS_CHANGED.format(
        homework['homework_name'], VERDICTS[homework_status]
    )


def send_message(bot, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    global last_message
    global last_message_hw_id
    if last_message == message and last_message_hw_id == current_hw_id:
        return None
    try:
        bot.send_message(
            MY_CHAT_ID, '–í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è –ü–æ—Å—Ç—É–ø–∏–ª–∞ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üì®'
        )
        bot.send_message(MY_CHAT_ID, message)
        logging.info(MESSAGE_SENT.format(message))
        last_message = message
        last_message_hw_id = current_hw_id
    except Exception as error:
        logging.error(MESSAGE_SENDING_FAILED.format(error))


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    global current_hw_id
    if not check_tokens():
        raise MissingVariableError(BOT_LAUNCH_STOPPED)
    bot = telegram.Bot(token=AWESOM_O_TOKEN)
    timestamp = int(time.time())
    while True:
        try:
            response = get_api_answer(timestamp)
            timestamp = response.get('current_date', timestamp)
            homeworks = check_response(response)
            if homeworks:
                current_hw_id = homeworks[0].get('id')
                send_message(bot, parse_status(homeworks[0]))
            else:
                logging.debug(STATUSES_NOT_CHANGED)
        except Exception as error:
            logging.error(ERROR_FOUND.format(error))
            send_message(bot, ERROR_FOUND.format(error))
        finally:
            time.sleep(RETRY_TIME)


if __name__ == '__main__':
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s, %(levelname)s, %(message)s, %(funcName)s, '
               '%(lineno)s',
        handlers=[logging.StreamHandler(),
                  logging.FileHandler(__file__ + '.log', encoding='utf-8')]
    )
    main()
